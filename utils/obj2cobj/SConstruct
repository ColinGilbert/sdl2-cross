import os

env = Environment(ENV = {'PATH' : os.environ['PATH'],
                         'HOME' : os.environ['HOME'],
                         'TERM' : 'xterm'},
                  CXX='g++',
                  tools=['default'], toolpath=[''])

AddOption('--win64',
          action='store_true',
          help='cross-compiles for windows',
          default=False)

if GetOption('win64'):
    env.Tool('crossmingw', toolpath = ['./utils/scripts/'])
    vardir='build/win/utils'
    targetsuffix='.exe'
    linkflags=('--static -Wl,--no-undefined ' +
               '-static-libgcc -static-libstdc++')
else:
    vardir='build/linux/utils'
    targetsuffix=''
    linkflags=''

VariantDir(vardir, 'utils')

base ='#/src'
target = '#/bin/obj2cobj' + targetsuffix

gccWarningLevel = [
   '-Wall', '-Wextra', '-Wcast-align', '-Wcast-qual',
   '-fpermissive',
   '-Wconversion', '-Wdisabled-optimization', #'-Weffc++',
   '-Wfloat-equal', '-Wformat=2', '-Wimport', '-Winit-self',
   '-Winline', '-Winvalid-pch', '-Wlong-long',
   '-Wmissing-format-attribute', '-Wmissing-include-dirs',
   '-Wmissing-noreturn', '-Wpacked', '-Wpointer-arith',
   '-Wredundant-decls', '-Wshadow', '-Wstack-protector',
   '-Wstrict-aliasing=2', '-Wunreachable-code',
   '-Wunsafe-loop-optimizations', '-Wunused',
   '-Wvariadic-macros', '-Wwrite-strings', '-pedantic',
   '-pedantic-errors', '-Woverloaded-virtual',
   '-Wswitch-enum', # '-Werror'
]

pathBoost  = os.environ['BOOST_DIR'];

# CPPFLAGS
####################
cppflags = ['-O0', '-g', '-gdwarf-2']
#cppflags = ['-O3']
cppflags.extend(['-fno-strict-aliasing',
                 '-std=c++11'])
cppflags.extend(gccWarningLevel)
cppflags.extend(['-isystem', pathBoost + '/include'])


sourcepaths = [
    base,
    pathBoost + '/include'
]

libpaths = []
libs = []
cppMain = [Glob('utils/obj2cobj/obj2cobj.cpp') +
           Glob('src/util/CObjUtil.cpp') +
           Glob('src/util/StringUtil.cpp') +
           Glob('src/extern/tiny_obj_loader.cpp')]

app = env.Program(target, cppMain,
                  LIBS = libs,
                  LINKFLAGS = linkflags,
                  LIBPATH  = libpaths,
                  CPPFLAGS = cppflags,
                  CPPPATH  = sourcepaths);
Default(app)
