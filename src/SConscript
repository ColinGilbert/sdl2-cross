import os, re, imp

Import('env')

base ='#/src'
target = '#/bin/main'

pathBoost  = os.environ["BOOSTDIR"];
pathSdl    = os.environ["SDL2DIR"];
pathGlm    = os.environ["GLMDIR"];
pathAngel  = os.environ["ANGELSCRIPTDIR"];
pathBullet = os.environ["BULLETDIR"];

lSDL      = ['SDL2']
lSDLimage = ['SDL2_image']
lSDLmixer = ['SDL2_mixer']
lSDLttf   = ['SDL2_ttf']
lBullet   = ['BulletCollision', 'BulletDynamics', 'LinearMath']
lGL       = ['GL', 'GLU']
lOther    = ['m', 'dl', 'rt']
lAll  = lSDL + lSDLimage + lSDLmixer + lSDLttf + lBullet + lGL + lOther

libpaths = [pathAngel + '/lib',
            pathSdl + '/lib',
            pathBullet + '/lib']

# Macros definitions
macroDefinitions = [
   'USING_SDL',           # Should always be set in SDL projects.
#   'LOGGING_DISABLED',    # Disables all logging
#   'LOG2STREAM_DISABLED', # Disables logging to stream
#   'LOG2FILE_DISABLED',   # Disables logging to file
]

gccWarningLevel = [
   '-Wall', '-Wextra', '-Wcast-align', '-Wcast-qual',
   '-fpermissive',
   '-Wconversion', '-Wdisabled-optimization', #'-Weffc++',
   '-Wfloat-equal', '-Wformat=2', '-Wimport', '-Winit-self',
   '-Winline', '-Winvalid-pch', '-Wlong-long',
   '-Wmissing-format-attribute', '-Wmissing-include-dirs',
   '-Wmissing-noreturn', '-Wpacked', '-Wpointer-arith',
   '-Wredundant-decls', '-Wshadow', '-Wstack-protector',
   '-Wstrict-aliasing=2', '-Wunreachable-code',
   '-Wunsafe-loop-optimizations', '-Wunused',
   '-Wvariadic-macros', '-Wwrite-strings', '-pedantic',
   '-pedantic-errors', '-Woverloaded-virtual',
   '-Wswitch-enum', # '-Werror'
]

# CPPFLAGS
####################
cppflags = ['-O0', '-g', '-gdwarf-2']
#cppflags = ['-O3']
cppflags.extend(['-fno-strict-aliasing',
                 '-std=c++11',
                 '-D_REENTRANT',# '-DBOOST_FILESYSTEM_NO_DEPRECATED',
                 '-DGLM_FORCE_RADIANS'])
cppflags.extend(['-isystem', pathBoost + '/include',
                 '-isystem', pathSdl + '/include/',
                 '-isystem', pathGlm,
                 '-isystem', pathBullet + '/include/bullet',
                 '-isystem', pathAngel + '/include',
                 '-isystem', pathAngel + '/include/angelscript'])
cppflags.extend(gccWarningLevel)
for macro in macroDefinitions:
   cppflags.append('-D' + macro)

sourcepaths = [
   base,
   pathBoost + '/include',
   pathGlm,
   pathAngel + '/include',
   pathBullet + '/include/bullet/',
   pathSdl + "/include/"]

######################
# SHARED EXTERNAL LIBRARY
#######################
externFiles = [Glob('extern/*.cpp') +
               Glob('extern/*/*.cpp') +
               Glob('extern/*/*/*.cpp')]
externLib = env.SharedLibrary('#/lib/extern',
                              externFiles,
                              LIBS = [],
                              LIBPATH = [],
                              CPPFLAGS = cppflags,
                              CPPPATH = [sourcepaths]);
Default(externLib)


######################
# SHARED MATH LIBRARY
#######################
mathFiles = [Glob('math/*.cpp') +
             Glob('math/*/*.cpp') +
             Glob('math/*/*/*.cpp')]
mathLib = env.SharedLibrary('#/lib/math',
                            mathFiles,
                            LIBS = [],
                            LIBPATH = [],
                            CPPFLAGS = cppflags,
                            CPPPATH = [sourcepaths]);
Default(mathLib)


######################
# SHARED UTIL LIBRARY
#######################
utilFiles = [Glob('util/*.cpp') +
             Glob('util/*/*.cpp') +
             Glob('util/*/*/*.cpp')]
utilLib = env.SharedLibrary('#/lib/util',
                            utilFiles,
                            LIBS = lSDL,
                            LIBPATH = libpaths,
                            CPPFLAGS = cppflags,
                            CPPPATH = [sourcepaths]);
Default(utilLib)


######################
# SHARED AUDIO LIBRARY
#######################
audioFiles = [Glob('audio/*.cpp') +
              Glob('audio/*/*.cpp') +
              Glob('audio/*/*/*.cpp')]
audioLib = env.SharedLibrary('#/lib/audio',
                             audioFiles,
                             LIBS = lSDL + lSDLmixer + mathLib + utilLib,
                             LIBPATH = libpaths,
                             CPPFLAGS = cppflags,
                             CPPPATH = [sourcepaths]);
Default(audioLib)


######################
# SHARED GRAPHICS LIBRARY
#######################
graphicsFiles = [Glob('graphics/*.cpp') +
                 Glob('graphics/*/*.cpp') +
                 Glob('graphics/*/*/*.cpp')]
graphicsLib = env.SharedLibrary('#/lib/graphics',
                             graphicsFiles,
                             LIBS = lSDL + lSDLimage + lSDLttf + mathLib + utilLib + lGL,
                             LIBPATH = libpaths,
                             CPPFLAGS = cppflags,
                             CPPPATH = [sourcepaths]);
Default(graphicsLib)


######################
# SHARED IO LIBRARY
#######################
ioFiles = [Glob('io/*.cpp') +
           Glob('io/*/*.cpp') +
           Glob('io/*/*/*.cpp')]
ioLib = env.SharedLibrary('#/lib/io',
                             ioFiles,
                             LIBS = lSDL + mathLib + utilLib,
                             LIBPATH = libpaths,
                             CPPFLAGS = cppflags,
                             CPPPATH = [sourcepaths]);
Default(ioLib)


######################
# SHARED MODEL LIBRARY
#######################
modelFiles = [Glob('model/*.cpp') +
              Glob('model/*/*.cpp') +
              Glob('model/*/*/*.cpp')]
modelLib = env.SharedLibrary('#/lib/model',
                             modelFiles,
                             LIBS = lSDL + lBullet + mathLib + utilLib,
                             LIBPATH = libpaths,
                             CPPFLAGS = cppflags,
                             CPPPATH = [sourcepaths]);
Default(modelLib)


######################
# Main Application
#######################
cppMain = [Glob('main.cpp') +
           Glob('core/*.cpp') +
           Glob('core/*/*.cpp') +
           Glob('core/*/*/*.cpp')]
app = env.Program(target, cppMain,
                  LIBS = mathLib + utilLib + externLib +
                         audioLib + modelLib + ioLib + graphicsLib + lAll,
                  LIBPATH  = libpaths,
                  CPPFLAGS = cppflags,
                  CPPPATH  = sourcepaths);
Default(app)
